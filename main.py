import logging
import asyncio
import tempfile
import os
import random

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, BufferedInputFile
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardMarkup, KeyboardButton
from gradio_client import Client
from gradio_client.utils import handle_file

TG_TOKEN = ""

bot = Bot(TG_TOKEN)
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

user_data: dict[int, dict] = {}

start_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ù–∞—á–∞—Ç—å –ø—Ä–∏–º–µ—Ä–∫—É")]],
    resize_keyboard=True
)

category_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–í–µ—Ä—Ö")],
        [KeyboardButton(text="–ù–∏–∑")],
    ],
    resize_keyboard=True
)


@dp.message(Command("start"))
async def cmd_start(m: Message):
    await m.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø—Ä–∏–º–µ—Ä–∏—Ç—å –æ–¥–µ–∂–¥—É. –ù–∞–∂–º–∏ ¬´–ù–∞—á–∞—Ç—å –ø—Ä–∏–º–µ—Ä–∫—É¬ª.",
        reply_markup=start_kb
    )


@dp.message(F.text == "–ù–∞—á–∞—Ç—å –ø—Ä–∏–º–µ—Ä–∫—É")
async def init_tryon(m: Message):
    user_data[m.from_user.id] = {
        "state": "category",
        "person": None,
        "garment": None,
        "category": None
    }
    await m.answer(
        "üëï –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–¥–µ–∂–¥—ã:",
        reply_markup=category_kb
    )


@dp.message(F.text.in_(["–í–µ—Ä—Ö", "–ù–∏–∑"]))
async def set_category(m: Message):
    uid = m.from_user.id
    if uid not in user_data or user_data[uid]["state"] != "category":
        await m.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –ø—Ä–∏–º–µ—Ä–∫—É".')
        return

    category_map = {
        "–í–µ—Ä—Ö": "upper_body",
        "–ù–∏–∑": "lower_body",
    }

    user_data[uid]["category"] = category_map[m.text]
    user_data[uid]["state"] = "person"
    await m.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç:", reply_markup=None)


@dp.message(F.photo)
async def receive_photo(m: Message):
    uid = m.from_user.id

    if uid not in user_data:
        await m.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –ø—Ä–∏–º–µ—Ä–∫—É".')
        return

    state = user_data[uid]["state"]

    if state == "person":
        img_bytes = await bot.download(m.photo[-1].file_id)
        user_data[uid]["person"] = img_bytes.read()
        user_data[uid]["state"] = "garment"
        await m.answer("‚úÖ –§–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã:")

    elif state == "garment":
        img_bytes = await bot.download(m.photo[-1].file_id)
        user_data[uid]["garment"] = img_bytes.read()
        user_data[uid]["state"] = "processing"

        await m.answer("üëó –§–æ—Ç–æ –æ–¥–µ–∂–¥—ã –ø–æ–ª—É—á–µ–Ω–æ. –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
        await generate_result(m)

    else:
        await m.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")


@dp.message(F.text)
async def handle_other_text(m: Message):
    uid = m.from_user.id

    if uid in user_data:
        state = user_data[uid]["state"]
        if state == "category":
            await m.answer("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–¥–µ–∂–¥—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
        elif state == "person":
            await m.answer("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞.")
        elif state == "garment":
            await m.answer("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã.")
        else:
            await m.answer("‚è≥ –ò–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    else:
        await m.answer('‚ÑπÔ∏è –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –ø—Ä–∏–º–µ—Ä–∫—É".')


async def generate_result(m: Message):
    uid = m.from_user.id
    data = user_data[uid]

    person_path = None
    garment_path = None
    temp_files = []

    try:
        with tempfile.NamedTemporaryFile(suffix=".jpg", delete=False) as person_file:
            person_file.write(data["person"])
            person_path = person_file.name
            temp_files.append(person_path)

        with tempfile.NamedTemporaryFile(suffix=".jpg", delete=False) as garment_file:
            garment_file.write(data["garment"])
            garment_path = garment_file.name
            temp_files.append(garment_path)

        client = Client("franciszzj/Leffa")
        client.timeout = 300

        result = client.predict(
            src_image_path=handle_file(person_path),
            ref_image_path=handle_file(garment_path),
            ref_acceleration=False,
            step=50,
            scale=2.5,
            seed=random.randint(0, 99999),
            vt_model_type="dress_code",
            vt_garment_type=data["category"],
            vt_repaint=False,
            api_name="/leffa_predict_vt"
        )

        if isinstance(result, tuple) and len(result) > 0:
            image_path = result[0]

            if isinstance(image_path, str) and os.path.exists(image_path):
                with open(image_path, "rb") as f:
                    await m.answer_photo(
                        BufferedInputFile(f.read(), filename=os.path.basename(image_path)),
                        caption="‚ú® –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–º–µ—Ä–∫–∏!"
                    )
            else:
                logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: {image_path}")
                await m.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API:")
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        await m.answer("‚ÑπÔ∏è –í–æ–∑–º–æ–∂–Ω–æ, –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    finally:
        for path in temp_files:
            if path and os.path.exists(path):
                try:
                    os.unlink(path)
                except Exception as e:
                    logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {path}: {e}")

        user_data.pop(uid, None)
        await m.answer(
            "‚úÖ –ü—Ä–∏–º–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë?",
            reply_markup=start_kb
        )


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
